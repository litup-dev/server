generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id                   Int                       @id @default(autoincrement())
  userId               Int                       @map("user_id")
  createdAt            DateTime?                 @default(now()) @map("created_at") @db.Timestamp(6)
  name                 String?                   @db.VarChar(20)
  location             Unsupported("geography")?
  phone                String?                   @db.VarChar(15)
  openTime             DateTime?                 @map("open_time") @db.Time(6)
  closeTime            DateTime?                 @map("close_time") @db.Time(6)
  capacity             Int?
  address              String?                   @db.VarChar(50)
  description          String?
  avgRating            Float?                    @map("avg_rating")
  reviewCnt            Int?                      @map("review_cnt")
  club_img_tb          club_img_tb[]
  club_keyword_summary club_keyword_summary[]
  club_review_tb       club_review_tb[]
  user_tb              user_tb                   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  favorite_tb          favorite_tb[]
  perform_tb           Perform[]

  @@map("club_tb")
}

model attend_tb {
  perform_id Int
  user_id    Int
  perform_tb Perform @relation(fields: [perform_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tb    user_tb    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([perform_id, user_id])
}

model club_img_tb {
  id         Int       @id @default(autoincrement())
  club_id    Int
  user_id    Int
  file_path  String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  is_main    Boolean?
  club_tb    Club      @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tb    user_tb   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model club_keyword_summary {
  id         Int        @id @default(autoincrement())
  club_id    Int
  keyword_id Int
  club_tb    Club       @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  keyword_tb keyword_tb @relation(fields: [keyword_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model club_review_keyword_tb {
  id             Int            @id @default(autoincrement())
  keyword_id     Int
  review_id      Int
  keyword_tb     keyword_tb     @relation(fields: [keyword_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  club_review_tb club_review_tb @relation(fields: [review_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model club_review_tb {
  id                     Int                      @id @default(autoincrement())
  club_id                Int
  user_id                Int
  rating                 Float?
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @db.Timestamp(6)
  content                String?
  club_review_keyword_tb club_review_keyword_tb[]
  club_tb                Club                     @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tb                user_tb                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review_img_tb          review_img_tb[]
}

model favorite_tb {
  id      Int     @id @default(autoincrement())
  club_id Int
  user_id Int
  club_tb Club    @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tb user_tb @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model keyword_category_code {
  id         Int          @id @default(autoincrement())
  code       String?      @db.VarChar(10)
  name       String?      @db.VarChar(10)
  keyword_tb keyword_tb[]
}

model keyword_tb {
  id                     Int                      @id @default(autoincrement())
  category_id            Int
  name                   String?                  @db.VarChar(50)
  icon_path              String?
  sort_order             Int?
  club_keyword_summary   club_keyword_summary[]
  club_review_keyword_tb club_review_keyword_tb[]
  keyword_category_code  keyword_category_code    @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model perform_img_tb {
  id         Int        @id @default(autoincrement())
  perform_id Int
  file_path  String?    @db.VarChar(255)
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @db.Timestamp(6)
  is_main    Boolean?
  perform_tb Perform @relation(fields: [perform_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model perform_review_tb {
  id         Int        @id @default(autoincrement())
  perform_id Int
  user_id    Int
  created_at DateTime?  @default(now()) @db.Timestamp(6)
  updated_at DateTime?  @db.Timestamp(6)
  content    String?    @db.VarChar(100)
  perform_tb Perform @relation(fields: [perform_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tb    user_tb    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Perform {
  id                Int                 @id @default(autoincrement())
  club_id           Int
  user_id           Int
  title             String?             @db.VarChar(100)
  description       String?
  perform_date      DateTime?           @db.Timestamp(6)
  price             Int?
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @db.Timestamp(6)
  is_cancelled      Boolean?
  artists           Json?
  sns_links         Json?
  attend_tb         attend_tb[]
  perform_img_tb    perform_img_tb[]
  perform_review_tb perform_review_tb[]
  club_tb           Club                @relation(fields: [club_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tb           user_tb             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("perform_tb")
}

model report_category_code {
  id        Int         @id @default(autoincrement())
  code      String?     @db.VarChar(50)
  name      String?     @db.VarChar(50)
  report_tb report_tb[]
}

model report_status_code {
  id        Int         @id @default(autoincrement())
  code      String?     @db.VarChar(20)
  name      String?     @db.VarChar(10)
  report_tb report_tb[]
}

model report_tb {
  id                   Int                  @id @default(autoincrement())
  user_id              Int
  category_id          Int
  type_id              Int
  status_id            Int
  entity_id            Int
  created_at           DateTime?            @default(now()) @db.Timestamp(6)
  content              String?
  report_category_code report_category_code @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  report_status_code   report_status_code   @relation(fields: [status_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  report_type_code     report_type_code     @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_tb              user_tb              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model report_type_code {
  id        Int         @id @default(autoincrement())
  code      String?     @db.VarChar(20)
  name      String?     @db.VarChar(10)
  report_tb report_tb[]
}

model review_img_tb {
  id             Int            @id @default(autoincrement())
  review_id      Int
  file_path      String?
  created_at     DateTime?      @default(now()) @db.Timestamp(6)
  updated_at     DateTime?      @db.Timestamp(6)
  is_main        Boolean?
  club_review_tb club_review_tb @relation(fields: [review_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model social_code {
  id      Int       @id @default(autoincrement())
  code    String?   @db.VarChar(10)
  name    String?   @db.VarChar(20)
  user_tb user_tb[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model user_tb {
  id                Int                 @id @default(autoincrement())
  social_id         Int
  nickname          String?             @db.VarChar(20)
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  updated_at        DateTime?           @db.Timestamp(6)
  profile_path      String?
  role              String?             @db.VarChar(20)
  attend_tb         attend_tb[]
  club_img_tb       club_img_tb[]
  club_review_tb    club_review_tb[]
  club_tb           Club[]
  favorite_tb       favorite_tb[]
  perform_review_tb perform_review_tb[]
  perform_tb        Perform[]
  report_tb         report_tb[]
  social_code       social_code         @relation(fields: [social_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
